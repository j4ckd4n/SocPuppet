from Plugins import Plugin

import requests, re, yaml

class MalwareBazaar(Plugin.Plugin):
  def __init__(self, hash: str = None, name: str = 'MalwareBazaar'):
    super().__init__(name)
    self._hash = hash
    self._url = "https://mb-api.abuse.ch/api/v1/"

  def _performLookup(self, value) -> dict:
    query = {
      "query": "get_info",
      "hash": value
    }
    res = requests.post(self._url, data=query)
    if res.status_code != 200:
      return {
        value: {
          "err": res
        }
      }
    
    results = res.json()

    if 'ok' not in results['query_status']:
      return {
        value: {
          "err": f"lookup failed: {results['query_status']}"
        }
      }
    
    data_out = {value: {}}

    for data in results['data']:
      data_out[value]['file_name'] = data['file_name']
      data_out[value]['file_size'] = str(data['file_size']) + " bytes"
      data_out[value]['file_type_mime'] = data['file_type_mime']
      data_out[value]['signature'] = data['signature']
      data_out[value]['reporter'] = data['reporter']
      data_out[value]['hashes'] = {
        "md5": data['md5_hash'],
        "sha1": data['sha1_hash'],
        "sha256": data['sha256_hash']
      }
      data_out[value]['devilery_method'] = data['delivery_method']
      data_out[value]['comment'] = data['comment']

      if data['intelligence']['clamav']:
        data_out[value]['clamav_detections'] = data['intelligence']['clamav']

      if data['file_information']:
        data_out[value]['file_information'] = data['file_information']

      if data['yara_rules']:
        data_out[value]['yara_rules'] = {}
        for yara in data['yara_rules']:
          data_out[value]['yara_rules'][yara['rule_name']] = {
            "author": yara['author'],
            "description": yara['description']
          }
          if yara['reference']:
            data_out[value]['yara_rules'][yara['rule_name']]['reference'] = yara['reference']

      data_out[value]['vendor_detections'] = self._parseVendorIntelDict(data['vendor_intel'])

      return data_out
 
  def _parseVendorIntelDict(self, vendor_intel: dict) -> dict:
    vendor_dict = {}

    if "ANY.RUN" in vendor_intel:
      for item in vendor_intel['ANY.RUN']:
        vendor_dict['any_run'] = {
          "file_name": item['file_name'],
          "malware_family": item['malware_family'],
          "date": item['date'],
          "verdict": item['verdict'],
          "analysis_url": item['analysis_url']
        }

    if "CERT-PL_MWDB" in vendor_intel:
      vendor_dict['cert-pl_mwdb'] = {
        "detection": vendor_intel['CERT-PL_MWDB']['detection'],
        "link": vendor_intel['CERT-PL_MWDB']['link']
      }
    
    if "YOROI_YOMI" in vendor_intel:
      vendor_dict['yoroi_yomi'] = {
        "detection": vendor_intel['YOROI_YOMI']['detection'],
        "score": vendor_intel['YOROI_YOMI']['score']
      }
    
    if "vxCube" in vendor_intel:
      vxCube = vendor_intel["vxCube"]
      vendor_dict['vxCube'] = {
        "verdict": vxCube['verdict'],
        "maliciousness": vxCube['maliciousness']
      }
      if vxCube['behaviour']:
        for behavior in vxCube['behaviour']:
          vendor_dict['vxCube']['behaviors'] = {
            "rule": behavior['rule'],
            "threat_level": behavior['threat_level']
          }
    
    if "InQuest" in vendor_intel:
      inquest = vendor_intel['InQuest']
      vendor_dict['inquest'] = {}
      vendor_dict['inquest']['verdict'] = inquest['verdict']
      if inquest['url']:
        vendor_dict['inquest']['url'] = inquest['url']
      if inquest['details']:
        for detail in inquest['details']:
          vendor_dict['inquest']['details'] = {
            "title": detail['title'],
            "category": detail['category'],
            "description": detail['description']
          }

    if "Triage" in vendor_intel:
      triage = vendor_intel['Triage']
      vendor_dict['triage'] = {
        "malware_family": triage['malware_family'],
        "score": triage['score'],
        "report_link": triage['link']
      }
      if triage['tags']:
        vendor_dict['triage']['tags'] = triage['tags']
      if triage['signatures']:
        for detection in triage['signatures']:
          vendor_dict['triage']['detections'] = {
            "detection": detection['signature'],
            "score": detection['score']
          }
      if triage['malware_config']:
        for config in triage['malware_config']:
          for key in config.keys():
            if "c2" in key:
              x = re.sub(r"\.", "[.]", config[key])
              x = re.sub("http://", "hxxp://", x)
              x = re.sub("https://", "hxxps://", x)
              config[key] = x
            vendor_dict['triage']['malware_config'] = {
              key: config[key]
            }

  def run(self):
    print("\n ---------------------------------------- ")
    print("        M A L W A R E  B A Z A A R        ")
    print(" ---------------------------------------- ")
    
    if self._hash == None:
      self._hash = input('Enter a MD5, SHA1, or SHA256 hash: ').strip()

    print(yaml.dump(self._performLookup(self._hash)))

    return

    query = {
      "query": "get_info",
      "hash": self._hash
    }
    print()
    res = requests.post(self._url, data=query)
    if res.status_code != 200:
      print(res)
      return
    
    results = res.json()

    if "ok" not in results['query_status']:
      print(f"Lookup failed: {results['query_status']}")
      return
    for data in results['data']:
      print(f"""
File Name: {data['file_name']}
File Size: {data['file_size']} bytes
File Type Mime: {data['file_type_mime']}
Signature: {data['signature']}
Reporter: {data['reporter']}

Hashes:
  - MD5: {data['md5_hash']}
  - SHA1: {data['sha1_hash']}
  - SHA256: {data['sha256_hash']}

Delivery Method: {data['delivery_method']}
Comment: \"{data['comment']}\"
  """)
      if data['intelligence']['clamav']:
        print("\nClamAV Detections:")
        for detection in data['intelligence']['clamav']:
          print(f"  - {detection}")

      if data['file_information']:
        print("\nFile Information:")
        for info in data['file_information']:
          print(f"  - Context: {info['context']}")
          print(f"  - Value: {info['value']}")

      if data['yara_rules']:
        print("\nYARA Ryles:")
        for yara in data['yara_rules']:
          print(f"  - Rule Name: {yara['rule_name']}")
          print(f"  - Author: {yara['author']}")
          print(f"  - Description: {yara['description']}")
          if yara['reference']:
            print(f"  - Reference: {yara['reference']}")

      self._parseVendorIntel(data["vendor_intel"])

  def _parseVendorIntel(self, vendor_intel: dict):
    # Any.Run
    print("\nVendor Intel:\n")
    if "ANY.RUN" in vendor_intel:
      print("  - Any.Run:")
      for item in vendor_intel['ANY.RUN']:
        print(f"    - File Name: {item['file_name']}")
        print(f"    - Malware Family: {item['malware_family']}")
        print(f"    - Date: {item['date']}")
        print(f"    - Verdict: {item['verdict']}")
        print(f"    - Analysis URL: {item['analysis_url']}")

    if "CERT-PL_MWDB" in vendor_intel:
      print(f"""  - CERT-PL_MWDB:
    - Detection: {vendor_intel["CERT-PL_MWDB"]["detection"]}
    - Link: {vendor_intel["CERT-PL_MWDB"]['link']}
      """)
    
    if "YOROI_YOMI" in vendor_intel:
      print(f"""  - YOROI_YOMI:
    - Detection: {vendor_intel["YOROI_YOMI"]['detection']}
    - Score: {vendor_intel["YOROI_YOMI"]['score']}    
      """)
    
    if "vxCube" in vendor_intel:
      print("  - vxCube:")
      vxCube = vendor_intel["vxCube"]
      print(f"    - Verdict: {vxCube['verdict']}")
      print(f"    - Maliciousness: {vxCube['maliciousness']}")
      if vxCube['behaviour']:
        print("    - Behavior:")
        for behavior in vxCube['behaviour']:
          print(f"      - Rule: {behavior['rule']}")
          print(f"      - Threat Level: {behavior['threat_level']}")
    
    if "InQuest" in vendor_intel:
      print("\n  - InQuest:")
      inquest = vendor_intel['InQuest']
      print(f"    - Verdict: {inquest['verdict']}")
      if inquest['url']:
        print(f"    - URL: {inquest['url']}")
      if inquest['details']:
        print(f"    - Details: ")
        for detail in inquest['details']:
          print(f"      - Title: {detail['title']}")
          print(f"      - Category: {detail['category']}")
          print(f"      - Description: {detail['description']}")

    if "Triage" in vendor_intel:
      print("\n  - Triage:")
      triage = vendor_intel['Triage']
      print(f"    - Malware Family: {triage['malware_family']}")
      print(f"    - Score: {triage['score']}")
      print(f"    - Report Link: {triage['link']}")
      if triage['tags']:
        print("    - Tags:")
        for tag in triage['tags']:
          print(f"      - {tag}")
      if triage['signatures']:
        print("    - Detections:")
        for detection in triage['signatures']:
          print(f"      - Detection: {detection['signature']}")
          print(f"      - Score: {detection['score']}")
      if triage['malware_config']:
        print("    - Malware Configurations:")
        for config in triage['malware_config']:
          for key in config.keys():
            if "c2" in key:
              x = re.sub(r"\.", "[.]", config[key])
              x = re.sub("http://", "hxxp://", x)
              x = re.sub("https://", "hxxps://", x)
              config[key] = x
            print(f"      - {key}: {config[key]}")